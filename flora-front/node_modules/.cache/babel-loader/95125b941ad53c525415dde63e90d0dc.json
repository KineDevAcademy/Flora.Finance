{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/rust/Flora.Network/flora-front/src/middlewares/Main.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport { useSubstrate } from '../substrate-lib';\nimport { DeveloperConsole } from '../substrate-lib/components';\nimport AccountSelector from '../components/AccountSelector';\nimport Events from '../components/Events';\nimport Interactor from '../components/Interactor';\nimport { message, loader } from './status';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport Web3 from 'web3';\nimport 'semantic-ui-css/semantic.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n\n  const [accountAddress, setAccountAddress] = useState(null);\n  const {\n    apiState,\n    keyring,\n    keyringState,\n    apiError\n  } = useSubstrate();\n  const accountPair = accountAddress && keyringState === 'READY' && keyring.getPair(accountAddress);\n  if (apiState === 'ERROR') return message(apiError);else if (apiState !== 'READY') return loader('Connecting to Substrate');\n\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n\n  const contextRef = /*#__PURE__*/createRef();\n\n  const getLibrary = provider => {\n    return new Web3(provider);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: contextRef,\n    children: [/*#__PURE__*/_jsxDEV(Sticky, {\n      context: contextRef,\n      children: /*#__PURE__*/_jsxDEV(AccountSelector, {\n        setAccountAddress: setAccountAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        stackable: true,\n        columns: \"equal\",\n        children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Interactor, {\n            accountPair: accountPair\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Events, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DeveloperConsole, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Main, \"er5j+gHaAw1w7ekbullS9LQVyb4=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/arieiro/rust/Flora.Network/flora-front/src/middlewares/Main.js"],"names":["React","useState","createRef","Container","Dimmer","Loader","Grid","Sticky","Message","useSubstrate","DeveloperConsole","AccountSelector","Events","Interactor","message","loader","Web3ReactProvider","Web3","Main","accountAddress","setAccountAddress","apiState","keyring","keyringState","apiError","accountPair","getPair","contextRef","getLibrary","provider"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,IAApC,EAA0CC,MAA1C,EAAkDC,OAAlD,QAAiE,mBAAjE;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAAQC,OAAR,EAAiBC,MAAjB,QAA8B,UAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,kCAAP;;AAEA,eAAe,SAASC,IAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM;AAAEoB,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,YAArB;AAAmCC,IAAAA;AAAnC,MAAgDf,YAAY,EAAlE;AACA,QAAMgB,WAAW,GACfN,cAAc,IACdI,YAAY,KAAK,OADjB,IAEAD,OAAO,CAACI,OAAR,CAAgBP,cAAhB,CAHF;AAKA,MAAIE,QAAQ,KAAK,OAAjB,EAA0B,OAAOP,OAAO,CAACU,QAAD,CAAd,CAA1B,KACK,IAAIH,QAAQ,KAAK,OAAjB,EAA0B,OAAON,MAAM,CAAC,yBAAD,CAAb;;AAC/B,MAAIQ,YAAY,KAAK,OAArB,EAA8B;AAC5B,WAAOR,MAAM,CAAC,iEAAD,CAAb;AACD;;AAED,QAAMY,UAAU,gBAAGzB,SAAS,EAA5B;;AAEA,QAAM0B,UAAU,GAAIC,QAAD,IAAc;AAC/B,WAAO,IAAIZ,IAAJ,CAASY,QAAT,CAAP;AACD,GAFD;;AAIA,sBACI;AAAK,IAAA,GAAG,EAAEF,UAAV;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEA,UAAjB;AAAA,6BACA,QAAC,eAAD;AAAiB,QAAA,iBAAiB,EAAEP;AAApC;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,SAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAgB,QAAA,OAAO,EAAC,OAAxB;AAAA,+BACE,QAAC,IAAD,CAAM,GAAN;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,WAAW,EAAEK;AAAzB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF,eAYE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBC;;GApCqBP,I;UAEgCT,Y;;;KAFhCS,I","sourcesContent":["import React, { useState, createRef } from 'react';\nimport { Container, Dimmer, Loader, Grid, Sticky, Message } from 'semantic-ui-react';\nimport { useSubstrate } from '../substrate-lib';\nimport { DeveloperConsole } from '../substrate-lib/components';\nimport AccountSelector from '../components/AccountSelector';\nimport Events from '../components/Events';\nimport Interactor from '../components/Interactor';\nimport {message, loader} from './status';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport Web3 from 'web3';\nimport 'semantic-ui-css/semantic.min.css';\n\nexport default function Main () {\n  const [accountAddress, setAccountAddress] = useState(null);\n  const { apiState, keyring, keyringState, apiError } = useSubstrate();\n  const accountPair =\n    accountAddress &&\n    keyringState === 'READY' &&\n    keyring.getPair(accountAddress);\n  \n  if (apiState === 'ERROR') return message(apiError);\n  else if (apiState !== 'READY') return loader('Connecting to Substrate');\n  if (keyringState !== 'READY') {\n    return loader('Loading accounts (please review any extension\\'s authorization)');\n  }\n  \n  const contextRef = createRef();\n\n  const getLibrary = (provider) => {\n    return new Web3(provider)\n  }\n  \n  return (\n      <div ref={contextRef}>\n        <Sticky context={contextRef}>\n        <AccountSelector setAccountAddress={setAccountAddress} />\n        </Sticky>\n        <Container>\n          <Grid stackable columns='equal'>\n            <Grid.Row>\n              <Interactor accountPair={accountPair} />\n              <Events />\n            </Grid.Row>\n          </Grid>\n        </Container>\n        <DeveloperConsole />\n      </div>\n    );\n  }\n  "]},"metadata":{},"sourceType":"module"}