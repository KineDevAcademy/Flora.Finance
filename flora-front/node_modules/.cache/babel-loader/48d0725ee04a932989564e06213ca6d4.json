{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/rust/Flora.Network/flora-front/src/substrate-lib/components/TxButton.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\nimport { useSubstrate } from '../';\nimport utils from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TxButton({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  _s();\n\n  // Hooks\n  const {\n    api\n  } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n  const {\n    palletRpc,\n    callable,\n    inputParams,\n    paramFields\n  } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n\n  const isSudo = () => type === 'SUDO-TX';\n\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n\n  const isSigned = () => type === 'SIGNED-TX';\n\n  const isRpc = () => type === 'RPC';\n\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) {\n        return;\n      }\n\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: {\n        source,\n        isInjected\n      }\n    } = accountPair;\n    let fromAcct; // signer is from Polkadot-js browser extension\n\n    if (isInjected && source) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({\n    status\n  }) => status.isFinalized ? setStatus('end') : setStatus(`Status da Transação: ${status.type}`);\n\n  const txErrHandler = err => setStatus('end');\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams); // transformed can be empty parameters\n\n    const txExecute = transformed ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed)) : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler).catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute = api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler).catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams); // transformed can be empty parameters\n\n    const txExecute = transformed ? api.tx[palletRpc][callable](...transformed) : api.tx[palletRpc][callable]();\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler).catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams); // transformed can be empty parameters\n\n    const txExecute = transformed ? api.tx[palletRpc][callable](...transformed) : api.tx[palletRpc][callable]();\n    const unsub = await txExecute.send(txResHandler).catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result => result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, {\n      emptyAsNull: false\n    });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (typeof unsub === 'function') {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Enviando...');\n    isSudo() && sudoTx() || isUncheckedSudo() && uncheckedSudoTx() || isSigned() && signedTx() || isUnsigned() && unsignedTx() || isQuery() && query() || isRpc() && rpc() || isConstant() && constant();\n  };\n\n  const transformParams = (paramFields, inputParams, opts = {\n    emptyAsNull: true\n  }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field,\n      value: paramVal[ind] || null\n    }));\n    return params.reduce((memo, {\n      type = 'string',\n      value\n    }) => {\n      if (value == null || value === '') return opts.emptyAsNull ? [...memo, null] : memo;\n      let converted = value; // Deal with a vector\n\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type) ? single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single) : single);\n        return [...memo, converted];\n      } // Deal with a single value\n\n\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type => utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) {\n      return true;\n    }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n\n      if (paramField.optional) {\n        return true;\n      }\n\n      if (param == null) {\n        return false;\n      }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) {\n      return false;\n    }\n\n    return acctPair.address === sudoKey;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    basic: true,\n    color: color,\n    style: style,\n    type: \"submit\",\n    onClick: transaction,\n    disabled: disabled || !palletRpc || !callable || !allParamsFilled() || (isSudo() || isUncheckedSudo()) && !isSudoer(accountPair),\n    children: label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n} // prop type checking\n\n\n_s(TxButton, \"Q7iDT9LM7C5h3vSFYZXHjyk1hmI=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = TxButton;\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf(['QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX', 'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton(props) {\n  return /*#__PURE__*/_jsxDEV(Button.Group, {\n    children: [/*#__PURE__*/_jsxDEV(TxButton, {\n      label: \"Sem Assinatura\",\n      type: \"UNSIGNED-TX\",\n      color: \"grey\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button.Or, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TxButton, {\n      label: \"Assinado\",\n      type: \"SIGNED-TX\",\n      color: \"blue\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = TxGroupButton;\nexport { TxButton, TxGroupButton };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TxButton\");\n$RefreshReg$(_c2, \"TxGroupButton\");","map":{"version":3,"sources":["/home/arieiro/rust/Flora.Network/flora-front/src/substrate-lib/components/TxButton.js"],"names":["React","useState","useEffect","PropTypes","Button","web3FromSource","useSubstrate","utils","TxButton","accountPair","label","setStatus","color","style","type","attrs","disabled","api","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isQuery","isSudo","isUncheckedSudo","isUnsigned","isSigned","isRpc","isConstant","loadSudoKey","query","sudo","key","isEmpty","toString","getFromAcct","address","meta","source","isInjected","fromAcct","injected","setSigner","signer","txResHandler","status","isFinalized","txErrHandler","err","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","rpc","emptyAsNull","constant","consts","transaction","opts","paramVal","map","inputParam","value","trim","params","field","ind","reduce","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","paramConversion","num","some","el","allParamsFilled","length","every","paramField","param","optional","isSudoer","acctPair","propTypes","object","func","isRequired","oneOf","shape","string","array","TxGroupButton","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'semantic-ui-react';\nimport { web3FromSource } from '@polkadot/extension-dapp';\n\nimport { useSubstrate } from '../';\nimport utils from '../utils';\n\nfunction TxButton ({\n  accountPair = null,\n  label,\n  setStatus,\n  color = 'blue',\n  style = null,\n  type = 'QUERY',\n  attrs = null,\n  disabled = false\n}) {\n  // Hooks\n  const { api } = useSubstrate();\n  const [unsub, setUnsub] = useState(null);\n  const [sudoKey, setSudoKey] = useState(null);\n\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\n\n  const isQuery = () => type === 'QUERY';\n  const isSudo = () => type === 'SUDO-TX';\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\n  const isUnsigned = () => type === 'UNSIGNED-TX';\n  const isSigned = () => type === 'SIGNED-TX';\n  const isRpc = () => type === 'RPC';\n  const isConstant = () => type === 'CONSTANT';\n\n  const loadSudoKey = () => {\n    (async function () {\n      if (!api || !api.query.sudo) { return; }\n      const sudoKey = await api.query.sudo.key();\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\n    })();\n  };\n\n  useEffect(loadSudoKey, [api]);\n\n  const getFromAcct = async () => {\n    const {\n      address,\n      meta: { source, isInjected }\n    } = accountPair;\n    let fromAcct;\n\n    // signer is from Polkadot-js browser extension\n    if (isInjected && source) {\n      const injected = await web3FromSource(source);\n      fromAcct = address;\n      api.setSigner(injected.signer);\n    } else {\n      fromAcct = accountPair;\n    }\n\n    return fromAcct;\n  };\n\n  const txResHandler = ({ status }) =>\n    status.isFinalized\n      ? setStatus('end')\n      : setStatus(`Status da Transação: ${status.type}`);\n\n  const txErrHandler = err =>\n    setStatus('end');\n\n  const sudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const uncheckedSudoTx = async () => {\n    const fromAcct = await getFromAcct();\n    const txExecute =\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\n\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const signedTx = async () => {\n    const fromAcct = await getFromAcct();\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const unsignedTx = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    // transformed can be empty parameters\n    const txExecute = transformed\n      ? api.tx[palletRpc][callable](...transformed)\n      : api.tx[palletRpc][callable]();\n\n    const unsub = await txExecute.send(txResHandler)\n      .catch(txErrHandler);\n    setUnsub(() => unsub);\n  };\n\n  const queryResHandler = result =>\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n\n  const query = async () => {\n    const transformed = transformParams(paramFields, inputParams);\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const rpc = async () => {\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\n    setUnsub(() => unsub);\n  };\n\n  const constant = () => {\n    const result = api.consts[palletRpc][callable];\n    result.isNone ? setStatus('None') : setStatus(result.toString());\n  };\n\n  const transaction = async () => {\n    if (typeof unsub === 'function') {\n      unsub();\n      setUnsub(null);\n    }\n\n    setStatus('Enviando...');\n\n    (isSudo() && sudoTx()) ||\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\n    (isSigned() && signedTx()) ||\n    (isUnsigned() && unsignedTx()) ||\n    (isQuery() && query()) ||\n    (isRpc() && rpc()) ||\n    (isConstant() && constant());\n  };\n\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\n    //   Otherwise, it will not be added\n    const paramVal = inputParams.map(inputParam => {\n      // To cater the js quirk that `null` is a type of `object`.\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\n        return inputParam.value.trim();\n      } else if (typeof inputParam === 'string') {\n        return inputParam.trim();\n      }\n      return inputParam;\n    });\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\n\n    return params.reduce((memo, { type = 'string', value }) => {\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\n\n      let converted = value;\n\n      // Deal with a vector\n      if (type.indexOf('Vec<') >= 0) {\n        converted = converted.split(',').map(e => e.trim());\n        converted = converted.map(single => isNumType(type)\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\n          : single\n        );\n        return [...memo, converted];\n      }\n\n      // Deal with a single value\n      if (isNumType(type)) {\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\n      }\n      return [...memo, converted];\n    }, []);\n  };\n\n  const isNumType = type =>\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\n\n  const allParamsFilled = () => {\n    if (paramFields.length === 0) { return true; }\n\n    return paramFields.every((paramField, ind) => {\n      const param = inputParams[ind];\n      if (paramField.optional) { return true; }\n      if (param == null) { return false; }\n\n      const value = typeof param === 'object' ? param.value : param;\n      return value !== null && value !== '';\n    });\n  };\n\n  const isSudoer = acctPair => {\n    if (!sudoKey || !acctPair) { return false; }\n    return acctPair.address === sudoKey;\n  };\n\n  return (\n    <Button\n      basic\n      color={color}\n      style={style}\n      type='submit'\n      onClick={transaction}\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\n    >\n      {label}\n    </Button>\n  );\n}\n\n// prop type checking\nTxButton.propTypes = {\n  accountPair: PropTypes.object,\n  setStatus: PropTypes.func.isRequired,\n  type: PropTypes.oneOf([\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\n    'CONSTANT']).isRequired,\n  attrs: PropTypes.shape({\n    palletRpc: PropTypes.string,\n    callable: PropTypes.string,\n    inputParams: PropTypes.array,\n    paramFields: PropTypes.array\n  }).isRequired\n};\n\nfunction TxGroupButton (props) {\n  return (\n    <Button.Group>\n      <TxButton\n        label='Sem Assinatura'\n        type='UNSIGNED-TX'\n        color='grey'\n        {...props}\n      />\n      <Button.Or />\n      <TxButton\n        label='Assinado'\n        type='SIGNED-TX'\n        color='blue'\n        {...props}\n      />\n    </Button.Group>\n  );\n}\n\nexport { TxButton, TxGroupButton };\n"]},"metadata":{},"sourceType":"module"}