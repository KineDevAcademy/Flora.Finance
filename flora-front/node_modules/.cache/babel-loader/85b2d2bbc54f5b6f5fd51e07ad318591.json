{"ast":null,"code":"var _jsxFileName = \"/home/arieiro/rust/Flora.Network/flora-front/src/components/Events.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\nimport { useSubstrate } from '../substrate-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTERED_EVENTS = ['system:ExtrinsicSuccess::(phase={\"applyExtrinsic\":0})'];\n\nconst eventName = ev => `${ev.section}:${ev.method}`;\n\nconst eventParams = ev => JSON.stringify(ev.data);\n\nfunction Main(props) {\n  _s();\n\n  const {\n    api\n  } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n  useEffect(() => {\n    let unsub = null;\n    let keyNum = 0;\n\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const {\n            event,\n            phase\n          } = record; // show what we are busy with\n\n          const evHuman = event.toHuman();\n          const evName = eventName(evHuman);\n          const evParams = eventParams(evHuman);\n          const evNamePhase = `${evName}::(phase=${phase.toString()})`;\n          if (FILTERED_EVENTS.includes(evNamePhase)) return;\n          setEventFeed(e => [{\n            key: keyNum,\n            icon: 'bell',\n            summary: evName,\n            content: evParams\n          }, ...e]);\n          keyNum += 1;\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n  const {\n    feedMaxHeight = 250\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Grid.Column, {\n    width: 8,\n    style: {\n      border: 'solid 0.3px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        float: 'left'\n      },\n      children: \"Eventos Finalizados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      basic: true,\n      circular: true,\n      size: \"mini\",\n      color: \"grey\",\n      floated: \"right\",\n      icon: \"erase\",\n      onClick: _ => setEventFeed([])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Feed, {\n      style: {\n        clear: 'both',\n        overflow: 'auto',\n        maxHeight: feedMaxHeight\n      },\n      events: eventFeed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Main, \"HzbIHdFtwwHPAwpppr5AXnLQOVM=\", false, function () {\n  return [useSubstrate];\n});\n\n_c = Main;\nexport default function Events(props) {\n  _s2();\n\n  const {\n    api\n  } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events ? /*#__PURE__*/_jsxDEV(Main, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 7\n  }, this) : null;\n}\n\n_s2(Events, \"a5IVjGvlzdb5yuE5zCYn+JGZcoo=\", false, function () {\n  return [useSubstrate];\n});\n\n_c2 = Events;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"Events\");","map":{"version":3,"sources":["/home/arieiro/rust/Flora.Network/flora-front/src/components/Events.js"],"names":["React","useEffect","useState","Feed","Grid","Button","useSubstrate","FILTERED_EVENTS","eventName","ev","section","method","eventParams","JSON","stringify","data","Main","props","api","eventFeed","setEventFeed","unsub","keyNum","allEvents","query","system","events","forEach","record","event","phase","evHuman","toHuman","evName","evParams","evNamePhase","toString","includes","e","key","icon","summary","content","feedMaxHeight","border","float","_","clear","overflow","maxHeight","Events"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Feed, Grid, Button } from 'semantic-ui-react';\nimport { useSubstrate } from '../substrate-lib';\n\nconst FILTERED_EVENTS = [\n  'system:ExtrinsicSuccess::(phase={\"applyExtrinsic\":0})'\n];\n\nconst eventName = ev => `${ev.section}:${ev.method}`;\nconst eventParams = ev => JSON.stringify(ev.data);\n\nfunction Main (props) {\n  const { api } = useSubstrate();\n  const [eventFeed, setEventFeed] = useState([]);\n\n  useEffect(() => {\n    let unsub = null;\n    let keyNum = 0;\n    const allEvents = async () => {\n      unsub = await api.query.system.events(events => {\n        // loop through the Vec<EventRecord>\n        events.forEach(record => {\n          // extract the phase, event and the event types\n          const { event, phase } = record;\n\n          // show what we are busy with\n          const evHuman = event.toHuman();\n          const evName = eventName(evHuman);\n          const evParams = eventParams(evHuman);\n          const evNamePhase = `${evName}::(phase=${phase.toString()})`;\n\n          if (FILTERED_EVENTS.includes(evNamePhase)) return;\n\n          setEventFeed(e => [{\n            key: keyNum,\n            icon: 'bell',\n            summary: evName,\n            content: evParams\n          }, ...e]);\n\n          keyNum += 1;\n        });\n      });\n    };\n\n    allEvents();\n    return () => unsub && unsub();\n  }, [api.query.system]);\n\n  const { feedMaxHeight = 250 } = props;\n\n  return (\n    <Grid.Column width={8} style={{ border:'solid 0.3px' }}>\n      <h1 style={{ float: 'left' }}>Eventos Finalizados</h1>\n      <Button\n        basic circular\n        size='mini'\n        color='grey'\n        floated='right'\n        icon='erase'\n        onClick={ _ => setEventFeed([]) }\n      />\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={ eventFeed } />\n    </Grid.Column>\n  );\n}\n\nexport default function Events (props) {\n  const { api } = useSubstrate();\n  return api.query && api.query.system && api.query.system.events\n    ? <Main {...props} />\n    : null;\n}\n"]},"metadata":{},"sourceType":"module"}